# SPDX-License-Identifier: Apache-2.0

########################################
# Pekko Serialization Fory Config File #
########################################

# This is the reference config file that contains all the default settings.
# Make your edits/overrides in your application.conf.

pekko.serialization.fory {
  # When enabled and pekko.loglevel=DEBUG serialization time and payload size
  # is logged for each messages.
  verbose-debug-logging = off

  # Additional classes that are allowed even if they are not defined in `serialization-bindings`.
  # This is useful when a class is not used for serialization any more and therefore removed
  # from `serialization-bindings`, but should still be possible to deserialize.
  allowed-class-prefix = []

  # Whether the type should be written to the manifest.
  # If this is off, then either deserialization-type must be defined, or there must be exactly
  # one serialization binding declared for this serializer, and the type in that binding will be
  # used as the deserialization type.
  # The intention behind disabling this is to remove extraneous type information
  # (ie, fully qualified class names) when serialized objects are persisted in Pekko persistence
  # or replicated using Pekko distributed data.
  # Note that Pekko remoting already has manifest compression optimizations that address this,
  # so for types that just get sent over remoting, this offers no optimization.
  type-in-manifest = on

  # The type to use for deserialization.
  # This is only used if type-in-manifest is disabled. If set, this type will be used to
  # deserialize all messages. This is useful if the binding configuration you want to use when
  # disabling type in manifest cannot be expressed as a single type. Examples of when you might
  # use this include when changing serializers, so you don't want this serializer used for
  # serialization and you haven't declared any bindings for it, but you still want to be able to
  # deserialize messages that were serialized with this serializer.
  deserialization-type = ""

}

#//#compression
# Compression settings for the fory binding
pekko.serialization.fory.compression {
  # Compression algorithm.
  # - off  : no compression
  # - gzip : using common java gzip
  # - lz4 : using lz4-java
  algorithm = gzip

  # If compression is enabled with the `algorithm` setting the payload is compressed
  # when it's larger than this value.
  compress-larger-than = 32 KiB
}

pekko.actor {
  serializers {
    fory = "com.github.pjfanning.pekko.serialization.fory.ForySerializer"
  }
  serialization-identifiers {
    fory = 703
  }
  serialization-bindings {
    # Define bindings for classes or interfaces use Fory serializer, e.g.
    # "com.example.Jsonable" = fory
    #
    # For security reasons it is disallowed to bind the Fory serializers to
    # open ended types that might be target to be deserialization gadgets, such as
    # java.lang.Object, java.io.Serializable, java.util.Comparable

  }
}
